// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  name String? 
  image String?
  birthDate DateTime? 
  gender Gender? 
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  likedAlbums   Album[]
  followedArtists   Artist[]
  playlists   Playlist[]
  likedtracks Track[]
}

enum Gender{
  male
  female
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  userId   String
  albumId  Int

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([albumId, userId])
}
model Artist {
  userId   String
  artistId  Int

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([artistId, userId])
}
model Track {
  userId   String
  trackId  String
  createdAt DateTime @default(now())

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([trackId, userId])
}

model Playlist {
  id       String   @id @default(cuid())
  userId   String
  name     String
  description     String?
  image String?
  tracks   PlaylistTrack[]  @relation("PlaylistTrack")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlaylistTrack {
  id        String   @id @default(cuid())
  playlistId String
  trackId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation("PlaylistTrack", fields: [playlistId], references: [id], onDelete: Cascade)
}